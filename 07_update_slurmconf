#!/usr/bin/env bash
set -euo pipefail

SLURM_CONF="/etc/slurm/slurm.conf"
HOSTS_FILE="/etc/hosts"
BACKUP_DIR="/var/backups"
TIMESTAMP="$(date +%Y%m%d_%H%M%S)"
BACKUP_FILE="${BACKUP_DIR}/slurm.conf.${TIMESTAMP}.bak"

mkdir -p "${BACKUP_DIR}"
cp -a "${SLURM_CONF}" "${BACKUP_FILE}"
echo "Backup of ${SLURM_CONF} saved to ${BACKUP_FILE}"

HOSTSHORT="$(hostname -s)"
IPADDR="$(ip -4 -o addr show scope global 2>/dev/null \
         | awk '{print $4}' | cut -d/ -f1 | grep -v '^127\.' | head -n1 || true)"

if [[ -z "${IPADDR}" ]]; then
  echo "ERROR: could not determine primary IPv4 address." >&2
  exit 1
fi

mapfile -t COMPUTE_HOSTS < <(
  awk '
    $0 ~ /^[[:space:]]*#/ { next }
    NF < 2 { next }
    {
      for (i=2; i<=NF; i++) {
        if ($i ~ /^lci-compute/) print $i
      }
    }
  ' "${HOSTS_FILE}" | sort -u
)

if [[ ${#COMPUTE_HOSTS[@]} -eq 0 ]]; then
  echo "No lci-compute* entries found in ${HOSTS_FILE}. Nothing to do." >&2
  exit 1
fi

declare -A nums_by_base
for hn in "${COMPUTE_HOSTS[@]}"; do
  if [[ "${hn}" =~ ^(.+)-([0-9]+)$ ]]; then
    base="${BASH_REMATCH[1]}"
    num="${BASH_REMATCH[2]}"
    nums_by_base["$base"]+="${num} "
  else
    nums_by_base["$hn"]+=""
  fi
done

parts=()
for base in "${!nums_by_base[@]}"; do
  nums_str="$(echo "${nums_by_base[$base]}" | xargs || true)"
  if [[ -z "${nums_str}" ]]; then
    parts+=("${base}")
    continue
  fi
  read -r -a arr <<< "${nums_str}"
  width="${#arr[0]}"
  IFS=$'\n' sorted_unique=($(printf '%s\n' "${arr[@]}" | sort -n -u))
  unset IFS

  if [[ ${#sorted_unique[@]} -eq 1 ]]; then
    n="${sorted_unique[0]}"
    formatted="$(printf "%0${width}d" "${n}")"
    parts+=("${base}-[${formatted}]")
    continue
  fi

  ranges=()
  start="${sorted_unique[0]}"
  prev="${start}"
  for ((i=1;i<${#sorted_unique[@]};i++)); do
    cur="${sorted_unique[i]}"
    if (( cur == prev + 1 )); then
      prev="$cur"
      continue
    else
      if (( start == prev )); then
        ranges+=( "$(printf "%0${width}d" "${start}")" )
      else
        ranges+=( "$(printf "%0${width}d" "${start}")-$(printf "%0${width}d" "${prev}")" )
      fi
      start="$cur"
      prev="$cur"
    fi
  done
  if (( start == prev )); then
    ranges+=( "$(printf "%0${width}d" "${start}")" )
  else
    ranges+=( "$(printf "%0${width}d" "${start}")-$(printf "%0${width}d" "${prev}")" )
  fi

  if (( ${#ranges[@]} == 1 )); then
    parts+=( "${base}-[${ranges[0]}]" )
  else
    IFS=, joined="${ranges[*]}"
    unset IFS
    parts+=( "${base}-[${joined}]" )
  fi
done

IFS=, sorted_parts="$(printf "%s\n" "${parts[@]}" | sort | paste -sd, -)"
unset IFS
NODE_EXPR="${sorted_parts}"
echo "Computed node expression(s): ${NODE_EXPR}"

# atomic edit
tmpfile="$(mktemp)"
cp "${SLURM_CONF}" "${tmpfile}.orig"

# SlurmctldHost replacement (single-line)
sed -E "s|^SlurmctldHost=.*|SlurmctldHost=${HOSTSHORT}(${IPADDR})|" "${tmpfile}.orig" > "${tmpfile}"

# Replace NodeName=... (compute stanza) — preserve indentation and add continuation backslash
sed -E -i "s|^([[:space:]]*)NodeName=lci-compute.*|\1NodeName=${NODE_EXPR} \\\\|g" "${tmpfile}"

# Replace Nodes=... under partitions — preserve indentation and add continuation backslash
sed -E -i "s|^([[:space:]]*)Nodes=lci-compute.*|\1Nodes=${NODE_EXPR} \\\\|g" "${tmpfile}"

# Move it into place and set ownership
mv "${tmpfile}" "${SLURM_CONF}"
chown slurm:slurm "${SLURM_CONF}"
echo "Updated ${SLURM_CONF}"

echo
echo "Changed lines (quick check):"
grep -n -E "^[[:space:]]*SlurmctldHost|^[[:space:]]*NodeName=|^[[:space:]]*Nodes=" "${SLURM_CONF}" || true
echo
echo "Backup kept at ${BACKUP_FILE}"

# attempt scontrol reconfig
/opt/slurm/current/bin/scontrol reconfig
